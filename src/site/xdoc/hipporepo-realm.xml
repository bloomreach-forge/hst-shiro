<?xml version="1.0"?><!--
    Copyright 2011 Hippo Licensed under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License. You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0 Unless required by
    applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
    OR CONDITIONS OF ANY KIND, either express or implied. See the
    License for the specific language governing permissions and
    limitations under the License.
  --><!DOCTYPE document PUBLIC "-//Apache Software Foundation//DTD XDOC 1.0//EN"
  "http://maven.apache.org/dtd/xdoc_1_0.dtd">
<document>
  <properties>
    <title>Detail on HippoRepositoryRealm</title>
  </properties>
  <body>

    <section name="Detail on HippoRepositoryRealm">

      <subsection name="Introduction">
        <p>
          This page will explain (a) how <code>HippoRepositoryRealm</code> authenticates a user against Hippo Repository security data store,
          (b) how it finds roles and (c) how it assigns permissions for the authenticated user.
        </p>
        <p>
          Also see <a href="apidocs/org/onehippo/forge/security/support/shiro/realm/HippoRepositoryRealm.html">Javadoc of HippoRepositoryRealm</a> for details or customizations.
        </p>
      </subsection>

      <subsection name="How to authenticate a user?">
        <p>
          It is really simple!
          <code>HippoRepositoryRealm</code> simply tries to invoke on <code>javax.jcr.Repository#login(Credentials)</code>
          by converting <code>UsernamePasswordToken</code> instance to <code>SimpleCredentials</code> instance.
        </p>
        <p>
          If the login is sucessful, then the user should be authenticated. Otherwise, the authentication should fail.
        </p>
        <p>
          See <a href="apidocs/org/onehippo/forge/security/support/shiro/realm/HippoRepositoryRealm.html#doGetAuthenticationInfo-org.apache.shiro.authc.AuthenticationToken-">#doGetAuthenticationInfo(org.apache.shiro.authc.AuthenticationToken)</a> for detail.
        </p>
      </subsection>

      <subsection name="How to assign roles to an authenticated user?">
        <p>
          This one is also very simple!
          <code>HippoRepositoryRealm</code> simply executes the following JCR query by default to find all the assigned group names:
        </p>
        <div class="brush: plain">
        <source><![CDATA[
//element(*, hipposys:group)[(@hipposys:members = '${username}' or @hipposys:members = '*')
and @hipposys:securityprovider = 'internal'];
        ]]></source>
        </div>
        <p>
          <em><strong>Note: </strong></em> the ${username} is replaced by the real username extracted from <code>UsernamePasswordToken</code> instance.
        </p>
      </subsection>

      <subsection name="How to assign permissions to an authenticated user?">
        <p>
          It is a bit more complex than the previous ones.
          Basically, <code>HippoRepositoryRealm</code> executes a JCR query like the following example
          to find all the <code>hipposys:authrole</code> nodes under <code>/hippo:configuration/hippo:domains</code>.
        </p>
        <div class="brush: plain">
        <source><![CDATA[
//hippo:configuration/hippo:domains//element(*, hipposys:authrole)
[ @hipposys:users = '${username}' or @hipposys:groups = 'author' or @hipposys:groups = 'editor' ... ]
        ]]></source>
        </div>
        <p>
          <em><strong>Note: </strong></em> the ${username} is replaced by the real username extracted from <code>UsernamePasswordToken</code> instance,
          and the parts after 'or @hipposys:groups = ' are appended at runtime based on all the role names which were found in the previous step.
          So, for example, if the username is 'jdoe' and the user is in both 'author' and 'editor' groups,
          then the JCR query to execute should be like the following:
        </p>
        <div class="brush: plain">
        <source><![CDATA[
//hippo:configuration/hippo:domains//element(*, hipposys:authrole)
[ @hipposys:users = 'jdoe' or @hipposys:groups = 'author' or @hipposys:groups = 'editor' ]
        ]]></source>
        </div>
        <p>
          Next, in each <code>hipposys:authrole</code> node under a domain node (e.g, 'everywhere', 'hippodocuments', etc. under /hippo:configuration/hippo:domains/),
          <code>HippoRepositoryRealm</code> reads <code>hipposys:role</code> property.
        </p>
        <p>
          A permission will be a <strong>concatenation</strong> of the <strong>domain node name</strong>, <strong>':'</strong>, and <strong><code>hipposys:role</code> property value</strong> by default.
        </p>
        <p>
          For example, suppose the JCR query above resulted in:
        </p>
        <ul>
          <li>
            /hippo:configuration/hippo:domains/workflow/hippo:authrole
            <br/>
            &nbsp;&nbsp;- hipposys:role = "readonly"
          </li>
          <li>
            /hippo:configuration/hippo:domains/hippodocuments/hippo:authrole
            <br/>
            &nbsp;&nbsp;- hipposys:role = "editor"
          </li>
          <li>
            /hippo:configuration/hippo:domains/everywhere/hippo:authrole
            <br/>
            &nbsp;&nbsp;- hipposys:role = "admin"
          </li>
        </ul>
        <p>
          Then, the end result of permissions in <code>HippoRepositoryRealm</code> will be like the following set:
        </p>
        <div class="brush: javascript">
        <source><![CDATA[
[ "workflow:readonly", "hippodocuments:editor", "everywhere:admin" ]
        ]]></source>
        </div>
        <p>
          <strong><em>Note: </em></strong> Please see <a href="http://shiro.apache.org/permissions.html">Understanding Permissions in Apache Shiro</a>
          for detail on how the permission strings work.
        </p>
      </subsection>

    </section>

  </body>
</document>
